# Multi-stage build optimized for Railway deployment  
FROM rust:1.83-bookworm AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Configure cargo for better network reliability
ENV CARGO_HTTP_TIMEOUT=600 \
    CARGO_HTTP_MULTIPLEXING=true \
    CARGO_HTTP_LOW_SPEED_LIMIT=10 \
    CARGO_HTTP_LOW_SPEED_TIMEOUT=600

# Copy all source files at once (simpler, more reliable)
COPY . .

# Build the application with retry mechanism
RUN cargo build --release || cargo build --release

# Runtime stage
FROM debian:bookworm-slim AS runtime

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Create non-root user
RUN useradd -ms /bin/bash appuser

# Copy binary from builder stage
COPY --from=builder /app/target/release/web-server-report ./web-server-report

# Copy static assets and config files
COPY dashboards ./dashboards/
COPY shared_components ./shared_components/
COPY shared_assets ./shared_assets/
COPY .env.example ./

# Set ownership and permissions
RUN chown -R appuser:appuser /app && \
    chmod +x ./web-server-report

USER appuser

# Environment variables
ENV RUST_LOG=info \
    RUST_BACKTRACE=1 \
    HOST="0.0.0.0" \
    PORT="8000"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Start the application
CMD ["./web-server-report"]
