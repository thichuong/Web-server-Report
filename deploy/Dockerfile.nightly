# Railway Dockerfile with Rust Nightly for edition2024 support
FROM rust:nightly-slim as builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set environment variables for cross-compilation
ENV CARGO_NET_RETRY=10
ENV CARGO_NET_TIMEOUT=300
ENV RUST_BACKTRACE=1

# Copy Cargo files
COPY Cargo.toml Cargo.lock ./

# Create a dummy main to cache dependencies
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    cargo build --release && \
    rm -rf src

# Copy source code
COPY src ./src
COPY dashboards ./dashboards
COPY shared_components ./shared_components
COPY shared_assets ./shared_assets

# Build the application with optimizations
RUN cargo build --release --bin web-server-report

# Runtime stage with minimal Ubuntu
FROM ubuntu:22.04

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y \
        ca-certificates \
        libssl3 \
        curl \
        tzdata \
        && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean

WORKDIR /app

# Copy the binary
COPY --from=builder /app/target/release/web-server-report ./web-server-report

# Copy application assets
COPY --from=builder /app/dashboards ./dashboards
COPY --from=builder /app/shared_components ./shared_components  
COPY --from=builder /app/shared_assets ./shared_assets

# Set permissions
RUN chmod +x ./web-server-report

# Create non-root user for security
RUN useradd -r -u 1001 -m appuser && \
    chown -R appuser:appuser /app
USER appuser

EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=45s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Runtime environment variables
ENV RUST_LOG=info \
    HOST=0.0.0.0 \
    PORT=8000 \
    RUST_BACKTRACE=0

CMD ["./web-server-report"]
