# Ultra-minimal Railway Dockerfile với Alpine Linux
FROM rust:1.75-alpine as builder

# Install build dependencies cho Alpine
RUN apk add --no-cache \
    musl-dev \
    pkgconfig \
    openssl-dev \
    openssl-libs-static \
    ca-certificates \
    build-base

WORKDIR /app

# Copy dependency files first for caching
COPY Cargo.toml Cargo.lock ./

# Create dummy main for dependency compilation
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies with static linking
ENV RUSTFLAGS="-C target-feature=+crt-static"
RUN cargo build --release --target x86_64-unknown-linux-musl && \
    rm -rf src target/x86_64-unknown-linux-musl/release/deps/web_server_report*

# Copy source code
COPY . .

# Build static binary cho Alpine
RUN cargo build --release --target x86_64-unknown-linux-musl

# Runtime stage - Ultra minimal Alpine
FROM alpine:3.19

# Install minimal runtime deps (chỉ ca-certificates)
RUN apk add --no-cache ca-certificates && \
    update-ca-certificates

WORKDIR /app

# Copy static binary
COPY --from=builder /app/target/x86_64-unknown-linux-musl/release/web-server-report ./web-server-report

# Copy assets
COPY --from=builder /app/dashboards ./dashboards
COPY --from=builder /app/shared_components ./shared_components
COPY --from=builder /app/shared_assets ./shared_assets

# Set permissions
RUN chmod +x ./web-server-report

# Create non-root user (Alpine style)
RUN addgroup -g 1001 appgroup && \
    adduser -D -u 1001 -G appgroup appuser && \
    chown -R appuser:appgroup /app

USER appuser

EXPOSE 8000

# Environment variables
ENV RUST_LOG=info \
    RUST_BACKTRACE=1 \
    DATABASE_URL="" \
    TAAPI_SECRET="" \
    REDIS_URL="redis://localhost:6379" \
    HOST="0.0.0.0" \
    PORT="8000"

CMD ["./web-server-report"]
