# Railway-optimized Dockerfile with dependency caching
FROM rust:1.83-bookworm AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy cargo files for dependency caching
COPY Cargo.toml Cargo.lock ./

# Copy source code
COPY src ./src/

# Build application with optimizations
RUN CARGO_TARGET_DIR=/tmp/target \
    CARGO_INCREMENTAL=0 \
    RUSTFLAGS="-C target-cpu=native -C opt-level=3 -C lto=thin" \
    cargo build --release --target x86_64-unknown-linux-gnu

# Runtime stage
FROM debian:bookworm-slim AS runtime

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

WORKDIR /app

# Create non-root user
RUN useradd -ms /bin/bash appuser

# Copy binary from builder
COPY --from=builder /tmp/target/x86_64-unknown-linux-gnu/release/web-server-report ./web-server-report

# Copy static assets
COPY dashboards ./dashboards/
COPY shared_components ./shared_components/
COPY shared_assets ./shared_assets/

# Set permissions
RUN chown -R appuser:appuser /app && \
    chmod +x ./web-server-report

USER appuser

# Environment variables
ENV RUST_LOG=info \
    RUST_BACKTRACE=1 \
    HOST="0.0.0.0" \
    PORT="8000"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

EXPOSE 8000

CMD ["./web-server-report"]
